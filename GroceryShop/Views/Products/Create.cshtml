@model GroceryShop.ViewModels.NewProductViewModel


@{
    ViewBag.Title = "Create";
     Layout = "~/Views/Shared/_AdminLayout.cshtml";
}




@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createProduct" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4  class="ml-3">Create Product</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <label class="control-label col-md-2">Category</label>
            <div class="col-md-10">
                <select class="form-control" name="CategoryID">
                    @foreach (var category in Model.AvailableCategories)
                    {
                        <option value="@category.ID">@category.Name</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>

        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OriginalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OriginalPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OriginalPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SellingPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SellingPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SellingPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.stock, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.stock, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.stock, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            <label class="control-label col-md-2">Image</label>
            <input type="hidden" id="ImageURL" name="ImageURL" />
            <img class="img-thumbnail img-fluid" id="productImage" width="100px" height="100px" />
            <div class="pl-3 mt-1 w-75">
                <div class="custom-file">
                    <input class="custom-file-input" required id="imageUpload" name="Image" type="file" accept=".png, .jpg, .jpeg" />
                    <label class="custom-file-label" id="fileUrl">Choose file</label>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />

                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary ml-1" })
                @*<button id="saveBtn" class="btn btn-default">Save</button>*@
            </div>
        </div>
    </div>
}


<script>
    $("#imageUpload").change(function () {
        debugger;
		var element = this;

		var formData = new FormData();

		var totalFiles = element.files.length;

		for (var i = 0; i < totalFiles; i++) {
			var file = element.files[i];
			formData.append("Photo", file);
		}

		$.ajax({
			type: 'POST',
			url: '@Url.Action("UploadImage", "Shared")',
			dataType: 'json',
			data: formData,
			contentType: false,
			processData: false
		})
        .done(function (response) {
        	console.log(response);

        	if (response.Success) {
                $("#ImageURL").val(response.ImageURL);
        		$("#productImage").attr("src", response.ImageURL);
        	}
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	alert("FAIL");
        });
	});
    @*$("#saveBtn").click(function () {
        Console.log("Saving....");
			$.ajax({
				type: 'POST',
				url: '@Url.Action("Create", "Products")',
                data: $("#createProduct").serialize()
            })
            .done(function (response) {
                $("#tableContiner").html(response);
                $("#actionContainer").html("");
                focusAction("tableContiner");
                })
                .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("FAIL");
                });
    });*@

</script>
